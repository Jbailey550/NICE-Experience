////
/// @group helpers
////

/// A map of glyph name to code (character entity reference).
/// Avoids things like content: '\201C' throughout SASS. Use the
/// get-glyph function.
/// @see get-glyph
/// @link https://css-tricks.com/snippets/html/glyphs/
/// @prop {String} bullet [2022] Bullet (•)
/// @prop {String} quotation-mark [0022] Quotation mark (")
/// @prop {String} greater-than [003e] Greater than symbol (>)
/// @prop {String} greater-than [003c] Less than symbol (<)
/// @prop {String} copyright [00a9] Copyright symbol (©)
/// @prop {String} left-double-quotation-mark [201C] Left double quotation mark (“)
$glyphs: (
	bullet: '2022',
	quotation-mark: '0022',
	greater-than: '003e',
	less-than: '003c',
	copyright: '00a9',
	left-double-quotation-mark: '201C'
	// Add more entity codes here as and when they're needed
);

/// Gets a glyph code (character entity reference) from the
/// $glyphs map, matching the given $name. Usually used with the content
/// property for psuedo elements, to avoid use of magic character reference strings.
/// @param $name The name of the glyph to get
/// @returns {string} The character entity reference code as a string, e.g. '\201C'
/// @see $glyphs
/// @example
/// 	.rule {
/// 		content: get-glyph(greater-than);
/// 	}
@function get-glyph($name) {
	@if map-has-key($glyphs, $name) {
		$code: map-get($glyphs, $name);
		@return unquote('\'\\#{$code}\'');
	} @else {
		@error 'Glyph with name #{$name} could not be found in the $glyphs map';
	}
}

// Output a BEM style glyph selector for each glyph in the map.
// E.g. .glyph.glyph--bullet { content: '\2022'; }
.glyph {
	@each $key, $value in $glyphs {
		&--#{$key} {
			&::before {
				content: unquote('\'\\#{$value}\'');
			}
		}
	}
}
