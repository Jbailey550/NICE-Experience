{% extends "./_sass-layout.njk" %}
{% set title = "SASS Code Standards" %}

{% block main %}

	<h1>SASS Code Standards</h1>

	<nav role="navigation">
		<ul>
			<li><a href="#syntax">Syntax/formatting</a></li>
			<li><a href="#naming"><abbr title="Block Element Modifier">BEM</abbr> &amp; Naming</a></li>
			<li><a href="#comments">Comments</a></li>
		</ul>
	</nav>

	<p class="lead">
		We follow the coding standards rules from the brilliant <a href="http://codeguide.co/#css" target="_blank" rel="external">Code Guide by @mdo</a> (which in turn was heavily inspired by <a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="external">Idiomatic CSS</a> and the <a href="http://github.com/styleguide" target="_blank" rel="external">GitHub Styleguide</a>) with a few exceptions as described below.
	</p>

	<p>
		We use <a href="https://github.com/sasstools/sass-lint" target="_blank" rel="external">SASS Lint</a> for SASS code linting and enforcement of syntax consistency. See our <code>.sass-lint.yml</code> for a detailed view.
	</p>

	<section id="syntax">
		<h2>Syntax &amp; formatting</h2>
		<p>
			The following are exceptions or additions to @mdo's Code Style:
		</p>

		<ul>
			<li>
				<h3 class="h6">Declaration order</h3>
				<p>Use this ordering of property declarations:</p>
				<ol>
					<li>
						Extends
						<br/>
						<small>
							(enforced with <code>extends-before-declarations</code> &amp; <code>extends-before-mixins</code> rules)
						</small>
					</li>
					<li>
						Mixins
						<br/>
						<small>
							(enforced with <code>extends-before-mixins</code> &amp; <code>mixins-before-declarations</code> rule)
						</small>
					</li>
					<li>
						Style declarations
						<br/>
						<small>
							(in alphabetical order - enforced by <code>property-sort-order</code> rule)
						</small>
					</li>
				</ol>
			</li>
			<li>
				<h3 class="h6">Prefixed properties</h3>
				<p>We encourage writing CSS as close to the W3C spec as possible which means not including vendor prefixes in our source. If these are needed for legacy browser support then we encourage use of tools like <a href="https://github.com/postcss/autoprefixer">PostCSS Autoprefixer</a>.</p>
			</li>
		</ul>

	</section>

	<section id="naming">
		<h2>BEM and naming</h2>

		<blockquote class="quote">
			<p>There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.</p>
			<footer>
				- <cite>Phil Karlton &amp; <a href="https://twitter.com/secretGeek/status/7269997868" target="_blank" rel="external">Leon Bambrick</a></cite>
			</footer>
		</blockquote>

		<p>
			We follow the <a href="http://codeguide.co/#css-classes" target="_blank" rel="external">class naming rules</a> (and selector rules) from @mdo. However, it's about CSS/SASS in general and doesn't include anything specifc about <a href="http://getbem.com/introduction/" target="_blank" rel="external">BEM</a>.
		</p>

		<p>
			We encourage use of BEM because (from <a href="https://github.com/airbnb/css#oocss-and-bem" target="_blank" rel="external">Airbnb's CSS / Sass Styleguide</a>):
		</p>

		<ul>
			<li>It helps create clear, strict relationships between CSS and HTML</li>
			<li>It helps us create reusable, composable components</li>
			<li>It allows for less nesting and lower specificity</li>
			<li>It helps in building scalable stylesheets</li>
		</ul>

		<h3>Variable naming</h3>

		<p>
			Variable names should follow the <a href="http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/quick-tip-name-your-sass-variables-modularly/" target="_blank" rel="external">general-to-specific approach</a> as suggested on <a href="http://sass-lang.com/styleguide/code" target="_blank" rel="external">SASS's Code Style Guide</a>.
		</p>

		{% source "css", "Variable naming example" -%}
			$color-link;
			$color-link-dark;
			$color-link-light;
		{%- endsource %}

	</section>

	<section id="comments">
		<h2>Comments</h2>

		<p>
			The other difference from @mdo's Code Guide is comment style. We use <a href="http://sassdoc.com/" target="_blank" rel="external">SassDoc</a> to auto-generate documentation from our comments, so we use <a href="http://sassdoc.com/annotations/" target="_blank" rel="external">SassDoc annotations</a> and <a href="http://sassdoc.com/file-level-annotations/" target="_blank" rel="external">file-level annotations</a>
		</p>

		{% source "css", "SassDoc annotation example" -%}
			/// This is the description of a mixin
			/// @param {Number} $some-vale A value that gets passed in
			@mixin($some-value) {
				// Do something
			}
		{%- endsource %}

		<a href="/sass/docs" class="btn btn--primary">SASS Documentation</a>

	</section>

{% endblock %}
